version: '3'

networks:
  demo:

services:
  # zookeeper:
  #   image: 'bitnami/zookeeper:3.6.3'
  #   hostname: zookeeper
  #   container_name: zookeeper
  #   ports:
  #     - "2181:2181"
  #   environment:
  #     ALLOW_ANONYMOUS_LOGIN: 'yes'
  #   #   ZOOKEEPER_CLIENT_PORT: 2181
  #   networks:
  #     - demo

  # kafka:
  #   image: 'bitnami/kafka:2.8.1'
  #   hostname: broker-1
  #   container_name: broker
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - "9092:9092"
  #   networks:
  #     - demo
  #   environment:
  #     ALLOW_PLAINTEXT_LISTENER: 'yes'
  #     KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
  #     KAFKA_BROKER_ID: 1
      
  #     KAFKA_LISTENERS: DOCKER://broker-1:29092,EXTERNAL://0.0.0.0:9092
  #     KAFKA_ADVERTISED_LISTENERS: DOCKER://broker-1:29092,EXTERNAL://localhost:9092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER

#   postgres:
#     image: postgres:14.3
#     container_name: postgres
#     volumes:
#       - "${PWD}/db_data:/var/lib/postgresql/data"
#     restart: always
#     ports:
#       - 5432:5432
#     networks:
#       - demo
#     environment:      
# #      TZ: Europe/Amsterdam
#       POSTGRES_HOST: 0.0.0.0
#       POSTGRES_DB: demo_db
#       POSTGRES_USER: postgres
#       POSTGRES_PASSWORD: root_pass

#   postgres-init:
#     image: postgres:14.3
#     container_name: postgres-init
#     volumes:
#       - "${PWD}/db_init/:/db_init/"
#     networks:
#       - demo    
#     command: "bash -c 'echo Waiting for Postgres... && \
#               cd /db_init && \
#               ./db-wait.sh postgres 5432 && \
#               cd /db_init/skel-user && \
#               echo Initializing skel-user... && \
#               /db_init/db-create.sh && \
#               echo skel-user: OK && \
#               exit 0'"

#   skel-user:
#     image: syspulse/skel-user:0.0.6
#     container_name: skel-user
#     depends_on:
#       - postgres
#       - postgres-init
#     restart: always
#     ports:
#       - 8081:8080
#     networks:
#       - demo
#     command: server
#     environment:
#       JAVA_OPTS: -Dgod
#       DATASTORE: postgres

#   skel-notify:
#     image: syspulse/skel-notify:0.0.6
#     container_name: skel-notify
#     restart: always
#     ports:
#       - 8082:8080
#     networks:
#       - demo
#     command: server
#     environment:
#       JAVA_OPTS: -Dgod
#       SMTP_HOST: ${SMTP_HOST}
#       SMTP_USER: ${SMTP_USER}
#       SMTP_PASS: ${SMTP_PASS}
#       SMTP_FROM: ${SMTP_FROM}
#       AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
#       AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
#       AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN}
#       AWS_REGION: ${AWS_REGION}
#       AWS_ACCOUNT: ${AWS_ACCOUNT}

#   skel-enroll:
#     image: syspulse/skel-enroll:0.0.6
#     container_name: skel-enroll
#     restart: always
#     ports:
#       - 8083:8080
#     networks:
#       - demo
#     command: server
#     environment:
#       JAVA_OPTS: -Dgod
#       USER_URI: http://skel-user:8080/api/v1/user
#       NOTIFY_URI: http://skel-notify:8080/api/v1/notify
#       NOTIFY_EMAIL: ${NOTIFY_EMAIL}
#       CONFIRM_URI: http://demo.hacken.cloud

#   # skel-tag:
#   #   image: syspulse/skel-tag:0.0.6
#   #   container_name: skel-tag
#   #   restart: always
#   #   volumes:
#   #     - "${PWD}/tags:/data"
#   #   ports:
#   #     - 8084:8080
#   #   networks:
#   #     - demo
#   #   command: server
#   #   environment:
#   #     JAVA_OPTS: -Dgod
#   #     #DATASTORE: dir:///data
#   #     DATASTORE: resources://

#   skel-auth:
#     image: syspulse/skel-auth:0.0.6
#     container_name: skel-auth
#     restart: always
#     ports:
#       - 8080:8080
#     networks:
#       - demo
#     command: server
#     environment:
#       JAVA_OPTS: -Dgod
#       USER_URI: http://skel-user:8080/api/v1/user
#       GOOGLE_AUTH_CLIENT_ID: ${GOOGLE_AUTH_CLIENT_ID}
#       GOOGLE_AUTH_CLIENT_SECRET: ${GOOGLE_AUTH_CLIENT_SECRET}
#       TWITTER_AUTH_CLIENT_ID: ${TWITTER_AUTH_CLIENT_ID}
#       TWITTER_AUTH_CLIENT_SECRET: ${TWITTER_AUTH_CLIENT_SECRET}
#       ETH_AUTH_CLIENT_ID: ${TWITTER_AUTH_CLIENT_ID}
#       ETH_AUTH_CLIENT_SECRET: ${TWITTER_AUTH_CLIENT_SECRET}

  # haas-token:
  #   image: 649502643044.dkr.ecr.eu-west-1.amazonaws.com/syspulse/haas-token:0.0.2
  #   container_name: haas-token
  #   restart: always
  #   volumes:
  #     - "${PWD}/tokens/data100:/data"
  #   ports:
  #     - 8091:8080
  #   networks:
  #     - demo
  #   command: server
  #   environment:
  #     JAVA_OPTS: -Dgod
  #     #DATASTORE: dir:///data
  #     DATASTORE: resources://

  # haas-circ:
  #   privileged: true
  #   image: 649502643044.dkr.ecr.eu-west-1.amazonaws.com/syspulse/haas-circ:0.0.2
  #   container_name: haas-circ
  #   restart: always
  #   ports:
  #     - 8092:8080
  #   networks:
  #     - demo
  #   command: server
  #   environment:
  #     JAVA_OPTS: -Dgod
  #     S3_BUCKET: ${S3_BUCKET}
  #     DATASTORE: dir:///mnt/s3/data/dev/ethereum/token/
  #     AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
  #     AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
  #     AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN}
  #     AWS_REGION: ${AWS_REGION}
  #     AWS_ACCOUNT: ${AWS_ACCOUNT}

  # haas-intercept:
  #   image: 649502643044.dkr.ecr.eu-west-1.amazonaws.com/syspulse/haas-intercept:0.0.2
  #   container_name: haas-intercept
  #   restart: always
  #   volumes:
  #     - "${PWD}/scripts:/scripts"
  #     - "${PWD}/interceptors:/interceptors"
  #   ports:
  #     - 8093:8080
  #   networks:
  #     - demo
  #   command: server
  #   environment:
  #     JAVA_OPTS: -Dgod
  #     SCRIPTS: dir:///scripts
  #     FEED_TX: kafka://broker-1:9092/transactions/intercept/latest
  #     FEED_BLOCK: kafka://broker-1:9092/blocks/intercept/latest
  #     FEED_TOKEN: kafka://broker-1:9092/token_transfers/intercept/latest
  #     #DATASTORE: mem://
  #     DATASTORE: dir:///interceptors
  #     # this is temporary, must be replace with NotificationService URI
  #     SMTP_HOST: ${SMTP_HOST}
  #     SMTP_USER: ${SMTP_USER}
  #     SMTP_PASS: ${SMTP_PASS}
  #     SMTP_FROM: ${SMTP_FROM}

  nginx:
    image: nginx
    container_name: nginx
    depends_on:
      # - skel-auth
      # - skel-user
      # - skel-notify
      # - skel-enroll
      # - skel-tag
      # - haas-token
      # - haas-circ
      # - haas-intercept
      - sparkmagic
    restart: always
    volumes:
      - "${PWD}/nginx/nginx.conf:/etc/nginx/nginx.conf:ro"
    ports:
      - 80:80
    networks:
      - demo

  sparkmagic:
    image: 649502643044.dkr.ecr.eu-west-1.amazonaws.com/syspulse/sparkmagic:latest
    container_name: sparkmagic
    restart: always
    volumes:
      - "${PWD}/notebooks:/home/jovyan/work"      
    ports:
      - 8888:8888
    networks:
      - demo
    environment:
      EVN: ${ENV}