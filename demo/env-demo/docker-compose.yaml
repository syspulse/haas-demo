version: '3'

networks:
  demo:

services:
  zookeeper:
    image: 'bitnami/zookeeper:3.6.3'
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: 'yes'
    #   ZOOKEEPER_CLIENT_PORT: 2181      
    #  ZOO_LOG_LEVEL: WARN
    networks:
      - demo

  kafka:
    image: 'bitnami/kafka:2.8.1'
    hostname: broker-1
    container_name: broker-1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9093:9093"
      - "9094:9094"
    networks:
      - demo
    environment:
      ALLOW_PLAINTEXT_LISTENER: 'yes'
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_BROKER_ID: 1
      
      KAFKA_LISTENERS: DOCKER://broker-1:9092,EXTERNAL://0.0.0.0:9094,DOCKER_EXTERNAL://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: DOCKER://broker-1:9092,EXTERNAL://localhost:9094,DOCKER_EXTERNAL://172.17.0.1:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER_EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
      #KAFKA_CFG_LOG4J_ROOT_LOGLEVEL: INFO
      KAFKA_LOG4J_ROOT_LOGLEVEL: INFO
      BITNAMI_DEBUG: "false"

  kafka-init:
    image: bitnami/kafka:2.8.1
    container_name: kafka-init
    depends_on:
      - kafka
    volumes:
      - "${PWD}/kafka_init/:/kafka_init/"
    networks:
      - demo    
    command: "bash -c 'echo Waiting for Kafka... && \
              cd /kafka_init && \
              ./kafka-wait.sh broker-1 9092 && \
              ./kafka-provision.sh broker-1:9092 && \
              echo kafka: OK && \
              exit 0'"

  ethereum-etl-ethereum-mainnet:
    image: syspulse/ethereum-etl:2.1.2.5
    container_name: ethereum-etl-ethereum-mainnet
    restart: always
    volumes:
      - "${PWD}/s3:/s3"
    networks:
      - demo
    command: "stream \
              -p 'http://geth.demo.hacken.cloud:8545' \
              --output=kafka/broker-1:9092/ethereum.mainnet. \
              -l /s3/data/dev/ethereum/last_synced_block.txt \
              --period-seconds 12 \
              --lag 0"

  postgres:
    image: postgres:14.3
    container_name: postgres
    volumes:
      - "${PWD}/data/db_data:/var/lib/postgresql/data"
    restart: always
    ports:
      - 5432:5432
    networks:
      - demo
    environment:      
#      TZ: Europe/Amsterdam
      POSTGRES_HOST: 0.0.0.0
      POSTGRES_DB: demo_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root_pass

  postgres-init:
    image: postgres:14.3
    container_name: postgres-init
    volumes:
      - "${PWD}/db_init/:/db_init/"
    networks:
      - demo    
    command: "bash -c 'echo Waiting for Postgres... && \
              cd /db_init && \
              ./db-wait.sh postgres 5432 && \
              cd /db_init/skel-user && \
              echo Initializing skel-user... && \
              /db_init/db-create.sh && \
              echo skel-user: OK && \
              exit 0'"

  skel-auth:
    image: syspulse/skel-auth:0.0.6
    container_name: skel-auth
    restart: always
    volumes:
      - "${PWD}/data:/data"
    ports:
      - 8080:8080
    networks:
      - demo
    command: server
    environment:
      # JAVA_OPTS: -Dgod
      DATASTORE: mem://
      STORE_CRED: dir:///data/store/auth/cred
      USER_URI: http://skel-user:8080/api/v1/user
      GOOGLE_AUTH_CLIENT_ID: ${GOOGLE_AUTH_CLIENT_ID}
      GOOGLE_AUTH_CLIENT_SECRET: ${GOOGLE_AUTH_CLIENT_SECRET}
      TWITTER_AUTH_CLIENT_ID: ${TWITTER_AUTH_CLIENT_ID}
      TWITTER_AUTH_CLIENT_SECRET: ${TWITTER_AUTH_CLIENT_SECRET}
      ETH_AUTH_CLIENT_ID: ${ETH_AUTH_CLIENT_ID}
      ETH_AUTH_CLIENT_SECRET: ${ETH_AUTH_CLIENT_SECRET}

  skel-user:
    image: syspulse/skel-user:0.0.6
    container_name: skel-user
    depends_on:
      - postgres
      - postgres-init
    restart: always
    ports:
      - 8081:8080
    networks:
      - demo
    command: server
    environment:
      # JAVA_OPTS: -Dgod
      DATASTORE: postgres

  skel-notify:
    image: syspulse/skel-notify:0.0.6
    container_name: skel-notify
    restart: always
    volumes:
      - "${PWD}/data:/data"
    ports:
      - 8082:8080
    networks:
      - demo
    command: server
    environment:
      # JAVA_OPTS: -Dgod
      DATASTORE: dir:///data/store/notify
      SMTP_HOST: ${SMTP_HOST}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN}
      AWS_REGION: ${AWS_REGION}
      AWS_ACCOUNT: ${AWS_ACCOUNT}
      TIMEOUT_IDLE: 600000
      SYSLOG_URI: kafka://broker-1:9092

  skel-enroll:
    image: syspulse/skel-enroll:0.0.6
    container_name: skel-enroll
    restart: always
    volumes:
      - "${PWD}/data:/data"
    ports:
      - 8083:8080
    networks:
      - demo
    command: server
    environment:
      # JAVA_OPTS: -Dgod
      USER_URI: http://skel-user:8080/api/v1/user
      NOTIFY_URI: http://skel-notify:8080/api/v1/notify
      NOTIFY_EMAIL: ${NOTIFY_EMAIL}
      CONFIRM_URI: http://localhost:8080
      JWT_ROLE_SERVICE: file:///data/auth/ACCESS_TOKEN_SERVICE

  haas-label:
    image: syspulse/skel-tag:0.0.6
    container_name: haas-label
    restart: always
    volumes:
      - "${PWD}/data:/data"
    ports:
      - 8084:8080
    networks:
      - demo
    command: server
    environment:
      #JAVA_OPTS: -Dgod
      DATASTORE: dir:///data/store/label
      #DATASTORE: resources://

  haas-token:
    image: syspulse/haas-token:0.0.3
    container_name: haas-token
    restart: always
    volumes:
      - "${PWD}/data:/data"
    ports:
      - 8091:8080
    networks:
      - demo
    command: server
    environment:
      #JAVA_OPTS: -Dgod
      DATASTORE: dir:///data/store/token
      #DATASTORE: resources://

  haas-circ:
    privileged: true
    image: syspulse/haas-circ:0.0.3
    container_name: haas-circ
    restart: always
    ports:
      - 8092:8080
    volumes:
      - "${PWD}/data:/data"
      - "${PWD}/s3:/s3"
    networks:
      - demo
    command: server
    environment:
      #JAVA_OPTS: -Dgod
      S3_BUCKET: ${S3_BUCKET}
      TOKENS_DEFAULT: file:///data/store/tokens-circ.default
      #DATASTORE: dir:///s3/data/dev/ethereum/token/
      DATASTORE: dir:///s3/data/dev/ethereum/supply/token
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN}
      AWS_REGION: ${AWS_REGION}
      AWS_ACCOUNT: ${AWS_ACCOUNT}
      JWT_ROLE_SERVICE: file:///data/auth/ACCESS_TOKEN_SERVICE
      SYSLOG_URI: kafka://broker-1:9092

  haas-holders:
    privileged: true
    image: syspulse/haas-holders:0.0.3
    container_name: haas-holders
    restart: always
    ports:
      - 8100:8080
    volumes:
      - "${PWD}/data:/data"
      - "${PWD}/s3:/s3"
    networks:
      - demo
    command: server
    environment:
      #JAVA_OPTS: -Dgod
      S3_BUCKET: ${S3_BUCKET}
      DATASTORE: dir:///s3/data/dev/ethereum/token
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN}
      AWS_REGION: ${AWS_REGION}
      AWS_ACCOUNT: ${AWS_ACCOUNT}
      JWT_ROLE_SERVICE: file:///data/auth/ACCESS_TOKEN_SERVICE
      SYSLOG_URI: kafka://broker-1:9092

  haas-intercept:
    image: syspulse/haas-intercept:0.0.3
    container_name: haas-intercept
    restart: always
    volumes:
      - "${PWD}/data:/data"
    ports:
      - 8093:8080
    networks:
      - demo
    command: server
    environment:
      #JAVA_OPTS: -Dgod
      LOGGING: root:INFO,io.syspulse:INFO

      BID: ethereum,zksync

      FEED_ETHEREUM_TX: kafka://broker-1:9092/ethereum.mainnet.transactions/intercept/latest
      FEED_ETHEREUM_BLOCK: kafka://broker-1:9092/ethereum.mainnet.blocks/intercept/latest
      FEED_ETHEREUM_TOKEN: kafka://broker-1:9092/ethereum.mainnet.transfers/intercept/latest
      FEED_ETHEREUM_EVENT: kafka://broker-1:9092/ethereum.mainnet.logs/intercept/latest
      FEED_ETHEREUM_MEMPOOL: kafka://broker-1:9092/ethereum.mainnet.mempool/intercept/latest

      FEED_ZKSYNC_TX: kafka://broker-1:9092/zksync.mainnet.transactions/intercept/latest
      FEED_ZKSYNC_BLOCK: kafka://broker-1:9092/zksync.mainnet.blocks/intercept/latest
      FEED_ZKSYNC_TOKEN: kafka://broker-1:9092/zksync.mainnet.transfers/intercept/latest
      FEED_ZKSYNC_EVENT: kafka://broker-1:9092/zksync.mainnet.logs/intercept/latest
      FEED_ZKSYNC_MEMPOOL: kafka://broker-1:9092/zksync.mainnet.mempool/intercept/latest
      
      DATASTORE: dir:///data/store/intercept
      STORE_SCRIPT: dir:///data/store/script
      STORE_ABI: dir:///data/store/abi
      # this is temporary, must be replace with NotificationService URI
      SMTP_HOST: ${SMTP_HOST}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM}
      JWT_ROLE_SERVICE: file:///data/auth/ACCESS_TOKEN_SERVICE
      HISTORY: 100

  haas-abi:
    image: syspulse/haas-abi:0.0.3
    container_name: haas-abi
    restart: always
    volumes:
      - "${PWD}/data:/data"
    ports:
      - 8094:8080
    networks:
      - demo
    command: server
    environment:
      #JAVA_OPTS: -Dgod
      DATASTORE: dir:///data/store/abi

#   haas-price:
#     privileged: true
#     #image: syspulse/skel-telemetry:0.0.6
#     image: 649502643044.dkr.ecr.eu-west-1.amazonaws.com/syspulse/skel-telemetry:0.0.6
#     container_name: haas-price
#     volumes:
#       - "${PWD}/data:/data"
#     restart: always
#     ports:
#       - 8096:8080    
#     networks:
#       - demo
#     command: server
#     environment:
#       JAVA_OPTS: -Dgod
#       S3_BUCKET: ${S3_BUCKET}
#       DATASTORE: dir:///data/s3/data/dev/coingecko/price/2023
#       STORE_EVICT: 86400000
#       AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
#       AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
#       AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN}
#       AWS_REGION: ${AWS_REGION}
#       AWS_ACCOUNT: ${AWS_ACCOUNT}
#       HTTP_URI: /api/v1/price

  skel-job:
    privileged: true
    image: syspulse/skel-job:0.0.6
    container_name: skel-job
    restart: always
    ports:
      - 8099:8080
    volumes:
      - "${PWD}/data:/data"
    networks:
      - demo
    command: server
    environment:
      # JAVA_OPTS: -Dgod
      DATASTORE: dir:///data/store/job
      POLL: 10000
      NOTIFY_URI: http://skel-notify:8080/api/v1/notify
      ENGINE: livy://http://livy:8998
      JWT_ROLE_SERVICE: file:///data/auth/ACCESS_TOKEN_SERVICE

  haas-frontend-demo:
    image: haas-frontend-demo:latest
    container_name: haas-frontend-demo
    volumes:
      - "${PWD}/data:/data"
    restart: always
    ports:
      - 3000:3000
    networks:
      - demo
    environment:
      GOOGLE_AUTH_CLIENT_ID: ${GOOGLE_AUTH_CLIENT_ID}
      TWITTER_AUTH_CLIENT_ID: ${TWITTER_AUTH_CLIENT_ID}
      ETH_AUTH_CLIENT_ID: ${ETH_AUTH_CLIENT_ID}      

  nginx:
    image: nginx
    container_name: nginx
    depends_on:
      - skel-auth
      - skel-user
      - skel-notify
      - skel-enroll
      - haas-label
      - haas-token
      - haas-circ
      - haas-holders
      - haas-intercept
      - haas-abi
      # - haas-price
      - skel-job
      # - sparkmagic
    restart: always
    volumes:
      - "${PWD}/nginx/nginx.conf:/etc/nginx/nginx.conf:ro"
    ports:
      - 80:80
    networks:
      - demo

#   sparkmagic:
#     image: 649502643044.dkr.ecr.eu-west-1.amazonaws.com/syspulse/sparkmagic:latest
#     container_name: sparkmagic
#     restart: always
#     volumes:
#       - "${PWD}/notebooks:/home/jovyan/work"
#     ports:
#       - 8888:8888
#     networks:
#       - demo
#     environment:
#       AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
#       AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
#       AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN}
#       AWS_REGION: ${AWS_REGION}
#       AWS_ACCOUNT: ${AWS_ACCOUNT}
#     #   EVN: ${ENV}
