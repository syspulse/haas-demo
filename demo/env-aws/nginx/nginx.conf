worker_processes 1;

events { worker_connections 1024; }

http {
    sendfile on;

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }
    
    server {
        server_name api.haas.cloud
        listen 80;
        #proxy_pass_header server;

        # this is the internal Docker DNS, cache only for 30s
        # this is needed to start when upstream hosts are not available
        resolver 127.0.0.11 valid=30s;
        
        location /api/v1/auth {
            set $upstream skel-auth;
            proxy_pass http://$upstream:8080;
        }
        
        location /api/v1/user {
            set $upstream skel-user;
            proxy_pass http://$upstream:8080;
        }

        location /api/v1/notify {
            set $upstream skel-notify;
            proxy_pass http://$upstream:8080;
            #proxy_pass http://skel-notify:8080;
        }

        # ALB idle timeout: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/application-load-balancers.html
        # Nginx idle timeout
        # Internal WebSocketServer idle timeouts 
        location /api/v1/notify/user {
            proxy_read_timeout 600;
            proxy_send_timeout 600;
            set $upstream skel-notify;
            proxy_pass http://$upstream:8080;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /api/v1/enroll {
            set $upstream skel-enroll;
            proxy_pass http://$upstream:8080;
        }

        location /api/v1/token {
            set $upstream haas-token;
            proxy_pass http://$upstream:8080;
        }

        location /api/v1/circ {
            set $upstream haas-circ;
            proxy_pass http://$upstream:8080;            
        }

        location /api/v1/abi {
            set $upstream haas-abi;
            proxy_pass http://$upstream:8080;            
        }

        location /api/v1/tag {
            set $upstream haas-label;
            proxy_pass http://$upstream:8080;
        }

        location /api/v1/price {
            set $upstream haas-price;
            proxy_pass http://$upstream:8080;            
        }

        location /api/v1/intercept {
            resolver 127.0.0.11 valid=30s;
            set $upstream haas-intercept;
            proxy_pass http://$upstream:8080;

            # if ($request_method = OPTIONS ) {
            #     add_header Allow "POST, OPTIONS, DELETE";
            #     add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept";
            #     add_header Access-Control-Allow-Origin "*";
            #     return 200;
            # }
        }

        location /api/v1/intercept/ws {
            resolver 127.0.0.11 valid=30s;
            set $upstream haas-intercept;
            proxy_pass http://$upstream:8080;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }

        location /api/v1/job {
            set $upstream skel-job;
            proxy_pass http://$upstream:8080;            
        }

        location /sparkmagic {
            resolver 127.0.0.11 valid=30s;
            set $upstream sparkmagic;
            proxy_pass http://$upstream:8888;

            proxy_set_header Host $http_host;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;

            proxy_hide_header Content-Security-Policy;
            proxy_hide_header X-Frame-Options;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

            #add_header Content-Security-Policy "default-src 'self' haas.hacken.cloud; style-src 'self' haas.hacken.cloud; script-src 'self' haas.hacken.cloud; font-src 'self' haas.hacken.cloud; connect-src 'self' haas.hacken.cloud; img-src 'self' haas.hacken.cloud; script-src-attr 'self' haas.hacken.cloud; script-src-elem 'self' haas.hacken.cloud; script-src-elem 'self' haas.hacken.cloud; style-src-attr 'self' haas.hacken.cloud; style-src-elem 'self' haas.hacken.cloud; worker-src 'self' haas.hacken.cloud;";
        }
    }
}
