version: '3'

networks:
  demo:

services:
  postgres:
    image: postgres:14.3
    container_name: postgres
    volumes:
      - "${PWD}/db_data:/var/lib/postgresql/data"
    restart: always
    ports:
      - 5432:5432
    networks:
      - demo
    environment:      
#      TZ: Europe/Amsterdam
      POSTGRES_HOST: 0.0.0.0
      POSTGRES_DB: demo_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root_pass

  postgres-init:
    image: postgres:14.3
    container_name: postgres-init
    volumes:
      - "${PWD}/db_init/:/db_init/"
    networks:
      - demo    
    command: "bash -c 'echo Waiting for Postgres... && \
              cd /db_init && \
              ./db-wait.sh postgres 5432 && \
              cd /db_init/skel-user && \
              echo Initializing skel-user... && \
              /db_init/db-create.sh && \
              echo skel-user: OK && \
              exit 0'"

  skel-auth:
    image: syspulse/skel-auth:latest
    container_name: skel-auth
    restart: always
    volumes:
      - "${PWD}/store:/store"
    ports:
      - 8080:8080
    networks:
      - demo
    command: server
    environment:
      # JAVA_OPTS: -Dgod
      DATASTORE: mem://
      STORE_CRED: dir:///store/auth/cred
      USER_URI: http://skel-user:8080/api/v1/user
      GOOGLE_AUTH_CLIENT_ID: ${GOOGLE_AUTH_CLIENT_ID}
      GOOGLE_AUTH_CLIENT_SECRET: ${GOOGLE_AUTH_CLIENT_SECRET}
      TWITTER_AUTH_CLIENT_ID: ${TWITTER_AUTH_CLIENT_ID}
      TWITTER_AUTH_CLIENT_SECRET: ${TWITTER_AUTH_CLIENT_SECRET}
      ETH_AUTH_CLIENT_ID: ${ETH_AUTH_CLIENT_ID}
      ETH_AUTH_CLIENT_SECRET: ${ETH_AUTH_CLIENT_SECRET}

  skel-user:
    image: syspulse/skel-user:latest
    container_name: skel-user
    depends_on:
      - postgres
      - postgres-init
    restart: always
    ports:
      - 8081:8080
    networks:
      - demo
    command: server
    environment:
      # JAVA_OPTS: -Dgod
      DATASTORE: postgres

  skel-notify:
    image: syspulse/skel-notify:latest
    container_name: skel-notify
    restart: always
    volumes:
      - "${PWD}/store:/store"
    ports:
      - 8082:8080
    networks:
      - demo
    command: server
    environment:
      # JAVA_OPTS: -Dgod
      DATASTORE: dir:///store/notify
      SMTP_HOST: ${SMTP_HOST}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN}
      AWS_REGION: ${AWS_REGION}
      AWS_ACCOUNT: ${AWS_ACCOUNT}
      TIMEOUT_IDLE: 600000
      KAFKA_URI: kafka://broker-1.hacken.dev:9092

  skel-enroll:
    image: syspulse/skel-enroll:latest
    container_name: skel-enroll
    restart: always
    volumes:
      - "${PWD}/auth:/auth"
    ports:
      - 8083:8080
    networks:
      - demo
    command: server
    environment:
      # JAVA_OPTS: -Dgod
      USER_URI: http://skel-user:8080/api/v1/user
      NOTIFY_URI: http://skel-notify:8080/api/v1/notify
      NOTIFY_EMAIL: ${NOTIFY_EMAIL}
      CONFIRM_URI: http://api.hacken.cloud
      JWT_ROLE_SERVICE: file:///auth/ACCESS_TOKEN_SERVICE

  haas-label:
    image: 649502643044.dkr.ecr.eu-west-1.amazonaws.com/syspulse/skel-tag:latest
    container_name: haas-label
    restart: always
    volumes:
      - "${PWD}/store:/store"
    ports:
      - 8084:8080
    networks:
      - demo
    command: server
    environment:
      JAVA_OPTS: -Dgod
      DATASTORE: dir:///store/label
      #DATASTORE: dir:///data
      #DATASTORE: resources://

  haas-token:
    image: 649502643044.dkr.ecr.eu-west-1.amazonaws.com/syspulse/haas-token:latest
    container_name: haas-token
    restart: always
    volumes:
      - "${PWD}/store/token:/data"
    ports:
      - 8091:8080
    networks:
      - demo
    command: server
    environment:
      #JAVA_OPTS: -Dgod
      DATASTORE: dir:///data
      #DATASTORE: resources://

  haas-circ:
    privileged: true
    image: 649502643044.dkr.ecr.eu-west-1.amazonaws.com/syspulse/haas-circ:latest
    container_name: haas-circ
    restart: always
    ports:
      - 8092:8080
    volumes:
      - "${PWD}/auth:/auth"
    networks:
      - demo
    command: server
    environment:
      #JAVA_OPTS: -Dgod
      S3_BUCKET: ${S3_BUCKET}
      TOKENS_DEFAULT: file:///mnt/s3/data/dev/info/tokens-circ.id
      #DATASTORE: dir:///mnt/s3/data/dev/ethereum/token/
      DATASTORE: dir:///mnt/s3/data/dev/ethereum/supply/token
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN}
      AWS_REGION: ${AWS_REGION}
      AWS_ACCOUNT: ${AWS_ACCOUNT}
      JWT_ROLE_SERVICE: file:///auth/ACCESS_TOKEN_SERVICE

  haas-intercept:
    image: 649502643044.dkr.ecr.eu-west-1.amazonaws.com/syspulse/haas-intercept:latest
    container_name: haas-intercept
    restart: always
    volumes:
      # - "${PWD}/scripts:/scripts"
      - "${PWD}/store:/store"
      - "${PWD}/auth:/auth"
    ports:
      - 8093:8080
    networks:
      - demo
    command: server
    environment:
      #JAVA_OPTS: -Dgod
      LOGGING: root:INFO,io.syspulse:INFO

      BID: ethereum,zksync

      FEED_ETHEREUM_TX: kafka://broker-1.hacken.dev:9092/ethereum.mainnet.transactions/intercept/latest
      FEED_ETHEREUM_BLOCK: kafka://broker-1.hacken.dev:9092/ethereum.mainnet.blocks/intercept/latest
      FEED_ETHEREUM_TOKEN: kafka://broker-1.hacken.dev:9092/ethereum.mainnet.token_transfers/intercept/latest
      FEED_ETHEREUM_EVENT: kafka://broker-1.hacken.dev:9092/ethereum.mainnet.logs/intercept/latest
      FEED_ETHEREUM_MEMPOOL: kafka://broker-1.hacken.dev:9092/ethereum.mainnet.mempool/intercept/latest

      FEED_ZKSYNC_TX: kafka://broker-1.hacken.dev:9092/zksync.mainnet.transactions/intercept/latest
      FEED_ZKSYNC_BLOCK: kafka://broker-1.hacken.dev:9092/zksync.mainnet.blocks/intercept/latest
      FEED_ZKSYNC_TOKEN: kafka://broker-1.hacken.dev:9092/zksync.mainnet.token_transfers/intercept/latest
      FEED_ZKSYNC_EVENT: kafka://broker-1.hacken.dev:9092/zksync.mainnet.logs/intercept/latest
      FEED_ZKSYNC_MEMPOOL: kafka://broker-1.hacken.dev:9092/zksync.mainnet.mempool/intercept/latest
      
      DATASTORE: dir:///store/intercept
      STORE_SCRIPT: dir:///store/script
      STORE_ABI: dir:///store/abi
      # this is temporary, must be replace with NotificationService URI
      SMTP_HOST: ${SMTP_HOST}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      SMTP_FROM: ${SMTP_FROM}
      JWT_ROLE_SERVICE: file:///auth/ACCESS_TOKEN_SERVICE
      HISTORY: 100

  haas-abi:
    image: 649502643044.dkr.ecr.eu-west-1.amazonaws.com/syspulse/haas-abi:latest
    container_name: haas-abi
    restart: always
    volumes:
      - "${PWD}/store:/store"
    ports:
      - 8094:8080
    networks:
      - demo
    command: server
    environment:
      #JAVA_OPTS: -Dgod
      DATASTORE: dir:///store/abi

  haas-price:
    privileged: true
    #image: syspulse/skel-telemetry:latest
    image: 649502643044.dkr.ecr.eu-west-1.amazonaws.com/syspulse/skel-telemetry:latest
    container_name: haas-price
    restart: always
    ports:
      - 8096:8080    
    networks:
      - demo
    command: server
    environment:
      JAVA_OPTS: -Dgod
      S3_BUCKET: ${S3_BUCKET}
      #DATASTORE: dir://${S3_MOUNT}/data/dev/coingecko/raw/csv/price/2023/03/28      
      DATASTORE: dir:///mnt/s3/data/dev/coingecko/price/2023
      STORE_EVICT: 86400000
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN}
      AWS_REGION: ${AWS_REGION}
      AWS_ACCOUNT: ${AWS_ACCOUNT}
      HTTP_URI: /api/v1/price

  skel-job:
    privileged: true
    image: syspulse/skel-job:latest
    container_name: skel-job
    restart: always
    ports:
      - 8099:8080
    volumes:
      - "${PWD}/store:/store"
      - "${PWD}/auth:/auth"
    networks:
      - demo
    command: server
    environment:
      # JAVA_OPTS: -Dgod
      DATASTORE: dir:///store/job
      POLL: 10000
      NOTIFY_URI: http://skel-notify:8080/api/v1/notify
      JWT_ROLE_SERVICE: file:///auth/ACCESS_TOKEN_SERVICE

  nginx:
    image: nginx
    container_name: nginx
    depends_on:
      - skel-auth
      - skel-user
      - skel-notify
      - skel-enroll
      - haas-label
      - haas-token
      - haas-circ
      - haas-intercept
      - haas-abi
      - haas-price
      - skel-job
      - sparkmagic
    restart: always
    volumes:
      - "${PWD}/nginx/nginx.conf:/etc/nginx/nginx.conf:ro"
    ports:
      - 80:80
    networks:
      - demo

  sparkmagic:
    image: 649502643044.dkr.ecr.eu-west-1.amazonaws.com/syspulse/sparkmagic:latest
    container_name: sparkmagic
    restart: always
    volumes:
      - "${PWD}/notebooks:/home/jovyan/work"
    ports:
      - 8888:8888
    networks:
      - demo
    environment:
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_SESSION_TOKEN: ${AWS_SESSION_TOKEN}
      AWS_REGION: ${AWS_REGION}
      AWS_ACCOUNT: ${AWS_ACCOUNT}
    #   EVN: ${ENV}
